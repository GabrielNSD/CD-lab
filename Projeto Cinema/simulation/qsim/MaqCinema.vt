// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/23/2021 00:29:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MaqCinema
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MaqCinema_vlg_sample_tst(
	cancel_pip,
	cancel_serv,
	clk,
	codV,
	fim_filme,
	peso,
	pip,
	pip_vendida,
	reset,
	serv,
	serv_completo,
	sampler_tx
);
input  cancel_pip;
input  cancel_serv;
input  clk;
input  codV;
input  fim_filme;
input  peso;
input  pip;
input  pip_vendida;
input  reset;
input  serv;
input  serv_completo;
output sampler_tx;

reg sample;
time current_time;
always @(cancel_pip or cancel_serv or clk or codV or fim_filme or peso or pip or pip_vendida or reset or serv or serv_completo)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MaqCinema_vlg_check_tst (
	Clear_Code,
	Cpip,
	Cser,
	LibCadeira,
	LibSala,
	Write_Code,
	sampler_rx
);
input  Clear_Code;
input  Cpip;
input  Cser;
input  LibCadeira;
input  LibSala;
input  Write_Code;
input sampler_rx;

reg  Clear_Code_expected;
reg  Cpip_expected;
reg  Cser_expected;
reg  LibCadeira_expected;
reg  LibSala_expected;
reg  Write_Code_expected;

reg  Clear_Code_prev;
reg  Cpip_prev;
reg  Cser_prev;
reg  LibCadeira_prev;
reg  LibSala_prev;
reg  Write_Code_prev;

reg  Clear_Code_expected_prev;
reg  Cpip_expected_prev;
reg  Cser_expected_prev;
reg  LibCadeira_expected_prev;
reg  LibSala_expected_prev;
reg  Write_Code_expected_prev;

reg  last_Clear_Code_exp;
reg  last_Cpip_exp;
reg  last_Cser_exp;
reg  last_LibCadeira_exp;
reg  last_LibSala_exp;
reg  last_Write_Code_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Clear_Code_prev = Clear_Code;
	Cpip_prev = Cpip;
	Cser_prev = Cser;
	LibCadeira_prev = LibCadeira;
	LibSala_prev = LibSala;
	Write_Code_prev = Write_Code;
end

// update expected /o prevs

always @(trigger)
begin
	Clear_Code_expected_prev = Clear_Code_expected;
	Cpip_expected_prev = Cpip_expected;
	Cser_expected_prev = Cser_expected;
	LibCadeira_expected_prev = LibCadeira_expected;
	LibSala_expected_prev = LibSala_expected;
	Write_Code_expected_prev = Write_Code_expected;
end



// expected Write_Code
initial
begin
	Write_Code_expected = 1'bX;
end 

// expected Clear_Code
initial
begin
	Clear_Code_expected = 1'bX;
end 

// expected LibSala
initial
begin
	LibSala_expected = 1'bX;
end 

// expected LibCadeira
initial
begin
	LibCadeira_expected = 1'bX;
end 

// expected Cpip
initial
begin
	Cpip_expected = 1'bX;
end 

// expected Cser
initial
begin
	Cser_expected = 1'bX;
end 
// generate trigger
always @(Clear_Code_expected or Clear_Code or Cpip_expected or Cpip or Cser_expected or Cser or LibCadeira_expected or LibCadeira or LibSala_expected or LibSala or Write_Code_expected or Write_Code)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Clear_Code = %b | expected Cpip = %b | expected Cser = %b | expected LibCadeira = %b | expected LibSala = %b | expected Write_Code = %b | ",Clear_Code_expected_prev,Cpip_expected_prev,Cser_expected_prev,LibCadeira_expected_prev,LibSala_expected_prev,Write_Code_expected_prev);
	$display("| real Clear_Code = %b | real Cpip = %b | real Cser = %b | real LibCadeira = %b | real LibSala = %b | real Write_Code = %b | ",Clear_Code_prev,Cpip_prev,Cser_prev,LibCadeira_prev,LibSala_prev,Write_Code_prev);
`endif
	if (
		( Clear_Code_expected_prev !== 1'bx ) && ( Clear_Code_prev !== Clear_Code_expected_prev )
		&& ((Clear_Code_expected_prev !== last_Clear_Code_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Clear_Code :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Clear_Code_expected_prev);
		$display ("     Real value = %b", Clear_Code_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Clear_Code_exp = Clear_Code_expected_prev;
	end
	if (
		( Cpip_expected_prev !== 1'bx ) && ( Cpip_prev !== Cpip_expected_prev )
		&& ((Cpip_expected_prev !== last_Cpip_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cpip :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cpip_expected_prev);
		$display ("     Real value = %b", Cpip_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Cpip_exp = Cpip_expected_prev;
	end
	if (
		( Cser_expected_prev !== 1'bx ) && ( Cser_prev !== Cser_expected_prev )
		&& ((Cser_expected_prev !== last_Cser_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cser :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cser_expected_prev);
		$display ("     Real value = %b", Cser_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Cser_exp = Cser_expected_prev;
	end
	if (
		( LibCadeira_expected_prev !== 1'bx ) && ( LibCadeira_prev !== LibCadeira_expected_prev )
		&& ((LibCadeira_expected_prev !== last_LibCadeira_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LibCadeira :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LibCadeira_expected_prev);
		$display ("     Real value = %b", LibCadeira_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LibCadeira_exp = LibCadeira_expected_prev;
	end
	if (
		( LibSala_expected_prev !== 1'bx ) && ( LibSala_prev !== LibSala_expected_prev )
		&& ((LibSala_expected_prev !== last_LibSala_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LibSala :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LibSala_expected_prev);
		$display ("     Real value = %b", LibSala_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LibSala_exp = LibSala_expected_prev;
	end
	if (
		( Write_Code_expected_prev !== 1'bx ) && ( Write_Code_prev !== Write_Code_expected_prev )
		&& ((Write_Code_expected_prev !== last_Write_Code_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Write_Code :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Write_Code_expected_prev);
		$display ("     Real value = %b", Write_Code_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Write_Code_exp = Write_Code_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MaqCinema_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cancel_pip;
reg cancel_serv;
reg clk;
reg codV;
reg fim_filme;
reg peso;
reg pip;
reg pip_vendida;
reg reset;
reg serv;
reg serv_completo;
// wires                                               
wire Clear_Code;
wire Cpip;
wire Cser;
wire LibCadeira;
wire LibSala;
wire Write_Code;

wire sampler;                             

// assign statements (if any)                          
MaqCinema i1 (
// port map - connection between master ports and signals/registers   
	.cancel_pip(cancel_pip),
	.cancel_serv(cancel_serv),
	.Clear_Code(Clear_Code),
	.clk(clk),
	.codV(codV),
	.Cpip(Cpip),
	.Cser(Cser),
	.fim_filme(fim_filme),
	.LibCadeira(LibCadeira),
	.LibSala(LibSala),
	.peso(peso),
	.pip(pip),
	.pip_vendida(pip_vendida),
	.reset(reset),
	.serv(serv),
	.serv_completo(serv_completo),
	.Write_Code(Write_Code)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #10000 1'b0;
end 

// codV
initial
begin
	codV = 1'b0;
	codV = #20000 1'b1;
	codV = #30000 1'b0;
	codV = #90000 1'b1;
	codV = #230000 1'b0;
	codV = #80000 1'b1;
	codV = #520000 1'b0;
end 

// peso
initial
begin
	peso = 1'b0;
	peso = #170000 1'b1;
	peso = #190000 1'b0;
	peso = #70000 1'b1;
	peso = #200000 1'b0;
end 

// pip
initial
begin
	pip = 1'b0;
end 

// cancel_pip
initial
begin
	cancel_pip = 1'b0;
end 

// pip_vendida
initial
begin
	pip_vendida = 1'b0;
end 

// serv
initial
begin
	serv = 1'b0;
end 

// cancel_serv
initial
begin
	cancel_serv = 1'b0;
end 

// serv_completo
initial
begin
	serv_completo = 1'b0;
end 

// fim_filme
initial
begin
	fim_filme = 1'b0;
end 

MaqCinema_vlg_sample_tst tb_sample (
	.cancel_pip(cancel_pip),
	.cancel_serv(cancel_serv),
	.clk(clk),
	.codV(codV),
	.fim_filme(fim_filme),
	.peso(peso),
	.pip(pip),
	.pip_vendida(pip_vendida),
	.reset(reset),
	.serv(serv),
	.serv_completo(serv_completo),
	.sampler_tx(sampler)
);

MaqCinema_vlg_check_tst tb_out(
	.Clear_Code(Clear_Code),
	.Cpip(Cpip),
	.Cser(Cser),
	.LibCadeira(LibCadeira),
	.LibSala(LibSala),
	.Write_Code(Write_Code),
	.sampler_rx(sampler)
);
endmodule

